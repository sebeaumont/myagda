#+TITLE:     Propositional Equality in Agda
#+SETUPFILE: org-source-setup.org

* Propositional Equality 

** The Equality Type
#+begin_src agda2
module Equality where

data _≡_ {A : Set} : A → A → Set where 
  refl : {x : A}
      -----
    → x ≡ x

infix 4 _≡_

{-# BUILTIN EQUALITY _≡_ #-}
#+end_src

** Symmetry of Equality
#+begin_src agda2
sym : {A : Set} {x y : A}
  → x ≡ y
    -----
  → y ≡ x
sym refl = refl
#+end_src

** Transitivity of equality
#+begin_src agda2
trans : {A : Set} {x y z : A}
  → x ≡ y
  → y ≡ z
    -----
  → x ≡ z
trans refl refl = refl
#+end_src

** Congruence of equality
Simply stated if x = y then f x = f y, to me this says as much about
what a function is as it does about the fact that functoriality
respects equality, depends on your viewpoint; but it's a fundemental
observation.
#+begin_src agda2
cong : {A B : Set} {x y : A} → (f : A → B)
  → x ≡ y
    ---------
  → f x ≡ f y
cong f refl = refl
#+end_src

** Congruence of equal function application
#+begin_src agda2
cong-app : ∀ {A B : Set} {f g : A → B}
  → f ≡ g
    ---------------------
  → ∀ (x : A) → f x ≡ g x
cong-app refl x = refl
#+end_src

** Substitution of equality
If two values are equal and a predicate holds for one then it holds
for the other.
#+begin_src agda2
subst : ∀ {A : Set} {x y : A} (P : A → Set)
  → x ≡ y
    ---------
  → P x → P y
subst P refl x′ = x′
#+end_src

** Equational reasoning

Some utilities - stolen from Core.agda to show how simple the magic
is.  I'm always genuinely amazed by the power of the dependant type
theory and the beauty of Agda as a language.

#+begin_src agda2
module ≡-Reasoning {A : Set} where
  
  infix  3 _∎
  infixr 2 _≡⟨⟩_ step-≡ step-≡˘
  infix  1 begin_

  begin_ : ∀ {x y : A}
    → x ≡ y
      -----
    → x ≡ y
  begin_ x≡y = x≡y

  _≡⟨⟩_ : ∀ (x {y} : A)
    → x ≡ y
      -----
    → x ≡ y
  _ ≡⟨⟩ x≡y = x≡y

  step-≡ : ∀ (x {y z} : A)
    → y ≡ z
    → x ≡ y
      -----
    → x ≡ z
  step-≡ _ y≡z x≡y = trans x≡y y≡z

  step-≡˘ : ∀ (x {y z} : A)
    → y ≡ z
    → y ≡ x
      -----
    → x ≡ z
  step-≡˘ _ y≡z y≡x = trans (sym y≡x) y≡z

  _∎ : ∀ (x : A)
      -----
    → x ≡ x
  _∎ _ = refl

  -- syntactic candy for step-≡
  syntax step-≡  x y≡z x≡y = x ≡⟨ x≡y ⟩ y≡z
  syntax step-≡˘ x y≡z y≡x = x ≡˘⟨ y≡x ⟩ y≡z
#+end_src


