#+TITLE:     Logical Connectives
#+SETUPFILE: org-source-setup.org

* Preamble

The idea is to always eat our own dogfood where possible.

#+begin_src agda2
module Connectives where
open import Naturals using (ℕ)

open import Equality using (_≡_; refl)
open Equality.≡-Reasoning

open import Isomorphism using (_≃_; _≲_; extensionality; _∘_; _⇔_)
open Isomorphism.≃-Reasoning
#+end_src

* DOING Propositions as types - Curry-Howard correspondence

/Propositions as types/ leverages the isomorpism between computational
stuctures and constructions in logic. See also [[id:2AFE8BA1-E8D8-405F-B5D1-7DCB9BE3BDD9][Trinitarianism]] and the
Categorical perspective.

| Concept                   | Computation                   | Logic |
|---------------------------+-------------------------------+-------|
| Conjunction (and)         | Product (×)                   | ∧     |
| Disjunction (or)          | Disjoint Sum/Union (⊎)         | ∨     |
| True                      | Unit (𝟏)                       | ⊤     |
| False                     | Empty/Void (𝟎)                 | ⊥     |
| Implication (→)           | Function/Exponentiation (A→B) | ⇒     |
| Universal Quantification  | Dependent Function (Π)        | ∀     |
| Existential Qantification | Dependent Pair (Σ)            | ∃     |


Since in Agda we do logic in the universes of =Set= in we can overload our
usual constructions to have logical meaning without making special
corresponding types with fancy names for doing proof. In other languages the
domain of propositions is distinct from the regular type universes.

Some Agda authors stick to the generic computation/category structures
which means there's less to remember at the cost of some readability. See:
[[https://github.com/jespercockx/agda-lecture-notes/blob/master/agda.pdf][Programming and Proving in Agda - Jesper Cockx]].

Ed: Also it's worth linking to impredicativity and universe stuff, see
also Agda's impredicative =Prop= and Lean4 for references.

* Conjunction is product

With the two natural projections.

If we define × as record type we get η-equality /definitionally/ which is
more convenient:

#+begin_src agda2
record _×_ (A B : Set) : Set where
  constructor ⟨_,_⟩
  field
    proj₁ : A
    proj₂ : B
open _×_

η-× : ∀ {A B : Set} (w : A × B) → ⟨ proj₁ w , proj₂ w ⟩ ≡ w
η-× w = refl -- no need to pattern match on constructor now
#+end_src

** Commutativity and Associativity
Commutativity and associativity can be said to hold on products, /upto
isomorphism/.

#+begin_src agda2
×-assoc : ∀ {A B C : Set} → (A × B) × C ≃ A × (B × C)
×-assoc =
  record
    { to      = λ{ ⟨ ⟨ x , y ⟩ , z ⟩ → ⟨ x , ⟨ y , z ⟩ ⟩ }
    ; from    = λ{ ⟨ x , ⟨ y , z ⟩ ⟩ → ⟨ ⟨ x , y ⟩ , z ⟩ }
    ; from∘to = λ{ ⟨ ⟨ x , y ⟩ , z ⟩ → refl }
    ; to∘from = λ{ ⟨ x , ⟨ y , z ⟩ ⟩ → refl }
    }

×-comm : ∀ {A B : Set} → A × B ≃ B × A
×-comm =
  record
    { to       =  λ{ ⟨ x , y ⟩ → ⟨ y , x ⟩ }
    ; from     =  λ{ ⟨ y , x ⟩ → ⟨ x , y ⟩ }
    ; from∘to  =  λ{ ⟨ x , y ⟩ → refl }
    ; to∘from  =  λ{ ⟨ y , x ⟩ → refl }
    }
#+end_src


** Equivalence
(⇔≃×) A ⇔ B is isomorphic to (A → B) × (B → A)

#+begin_src agda2
open _⇔_
⇔≃× : ∀ {A B : Set} → A ⇔ B ≃ (A → B) × (B → A)
⇔≃× =
    record
      { to   = λ a⇔b → ⟨ to a⇔b , from a⇔b ⟩
      ; from = λ ab×ba → record { to = proj₁ ab×ba; from = proj₂ ab×ba }
      ; from∘to = λ a⇔b → refl
      ; to∘from = λ ab×ba →
        begin
          ⟨ to record { to = proj₁ ab×ba; from = proj₂ ab×ba }
          , from record { to = proj₁ ab×ba; from = proj₂ ab×ba } ⟩
        ≡⟨⟩
          ⟨ proj₁ ab×ba , proj₂ ab×ba ⟩
        ≡⟨ η-× ab×ba ⟩
          ab×ba
        ∎
      }
#+end_src

* Truth is unit

/True/ is the unit type for which there is only one uninteresting constructor.
Once again we can use a record and again get /η-equality/ off the bat
definitionally.

In logic we call the true top /top/ and denoted =⊤= as it is the "top" of the
type lattice; the single constructor is called =tt= to stand for /true is
true/.

#+begin_src agda2
record ⊤ : Set where
  constructor tt

η-⊤ : ∀ (w : ⊤) → tt ≡ w
η-⊤ w = refl
#+end_src

Agda always knows when it's time for =tt=; perhaps she'll lay a little egg
for me![fn:1]
#+begin_src agda2
truth : ⊤
truth = tt
#+end_src

** TODO isomorphic identity of ⊤

* Disjunction is sum

We jump right in now and define disjoint union or sum type as the logical
equivalent of or.
#+begin_src agda2
data _⊎_ (A B : Set) : Set where
  inj₁ : A → A ⊎ B              -- often inl (⊎-I₁)
  inj₂ : B → A ⊎ B              -- and inr (⊎-I₂) in some texts

infixr 1 _⊎_                    -- weakest binding
#+end_src

We can make the case function to eliminate the disjunction (*⊎-E*):

#+begin_src agda2
case-⊎ : ∀ {A B C : Set}
  → (A → C)
  → (B → C)
  → A ⊎ B
    -------
  → C
case-⊎ f g (inj₁ x) = f x
case-⊎ f g (inj₂ x) = g x

η-⊎ : ∀ {A B : Set} (w : A ⊎ B) → case-⊎ inj₁ inj₂ w ≡ w
η-⊎ (inj₁ x) = refl
η-⊎ (inj₂ x) = refl

#+end_src
Pattern matching against the constructors =inj₁= and =inj₂= is typical how we
exploit evidence that a disjunction holds and indeed this form of
elimination is a feature of Agda that obviates the need for explicit
/recursors/ for inductive types.

#+begin_quote
When =inj₁= and =inj₂= appear on the right-hand side of an equation we refer
to them as constructors, and when they appear on the left-hand side we
refer to them as destructors. We also refer to case-⊎ as a destructor,
since it plays a similar role. Other terminology refers to =inj₁= and =inj₂=
as introducing a disjunction, and to =case-⊎= as eliminating a disjunction;
indeed the former are sometimes given the names *⊎-I₁* and *⊎-I₂* and the
latter the name *⊎-E*.
#+end_quote

We can throw in an arbitrary function with a disjunction:
#+begin_src agda2
uniq-⊎ : ∀ {A B C : Set} (h : A ⊎ B → C) (w : A ⊎ B) →
  case-⊎ (h ∘ inj₁) (h ∘ inj₂) w ≡ h w
uniq-⊎ h (inj₁ x) = refl
uniq-⊎ h (inj₂ y) = refl
#+end_src

** Ex. ⊎ is commutative upto isomorphism

#+begin_src agda2
-- lemma to go to and from A ⊎ B
⊎-xin : {A B : Set} → A ⊎ B → B ⊎ A
⊎-xin (inj₁ x) = inj₂ x
⊎-xin (inj₂ y) = inj₁ y

⊎-xin-elim : {A B : Set} → (w : A ⊎ B) → ⊎-xin (⊎-xin w) ≡ w
⊎-xin-elim (inj₁ x) = refl
⊎-xin-elim (inj₂ y) = refl

-- we can now construct the iso-morphism
⊎-comm : {A B : Set} → A ⊎ B ≃ B ⊎ A
⊎-comm ._≃_.to = ⊎-xin
⊎-comm ._≃_.from = ⊎-xin
⊎-comm ._≃_.from∘to = ⊎-xin-elim
⊎-comm ._≃_.to∘from = ⊎-xin-elim
#+end_src

** Ex. ⊎ is associative up to isomorphism

Here I did no work at all;  apart write out the type and then ask Agda to
case split, pattern match and fill in the obvious constors! Awesome.
I renamed the variables to make it a bit more obvious what's being
matched.

#+begin_src agda2
⊎-assoc : {A B C : Set} → A ⊎ (B ⊎ C) ≃ (A ⊎ B) ⊎ C
⊎-assoc ._≃_.to (inj₁ a) = inj₁ (inj₁ a)
⊎-assoc ._≃_.to (inj₂ (inj₁ b)) = inj₁ (inj₂ b)
⊎-assoc ._≃_.to (inj₂ (inj₂ c)) = inj₂ c

⊎-assoc ._≃_.from (inj₁ (inj₁ a)) = inj₁ a
⊎-assoc ._≃_.from (inj₁ (inj₂ b)) = inj₂ (inj₁ b)
⊎-assoc ._≃_.from (inj₂ c) = inj₂ (inj₂ c)

⊎-assoc ._≃_.from∘to (inj₁ a) = refl
⊎-assoc ._≃_.from∘to (inj₂ (inj₁ b)) = refl
⊎-assoc ._≃_.from∘to (inj₂ (inj₂ c)) = refl

⊎-assoc ._≃_.to∘from (inj₁ (inj₁ a)) = refl
⊎-assoc ._≃_.to∘from (inj₁ (inj₂ b)) = refl
⊎-assoc ._≃_.to∘from (inj₂ c) = refl
#+end_src

* Falsity

False is a never-to-be-constructed type, that is, the /void/ or /empty/ type,
also known as =bottom= (⊥) and negation is a function that returns bottom
(/false/) for any type. The elimination of bottom implies ex-falso quodlibet (EFQ)
and uses the /absurd/ value which can never pattern match.

#+begin_src agda2
data ⊥ : Set where

⊥-elim : {A : Set} → ⊥ → A
⊥-elim ()

uniq-⊥ : ∀ {C : Set} (h : ⊥ → C) (w : ⊥) → ⊥-elim w ≡ h w
uniq-⊥ h ()
#+end_src

This comes in the next chapter on negation. But it's worth mentioning here.[fn:2]
#+begin_src agda2
¬_ : Set → Set
¬ A = ⊥
#+end_src

** ⊥-identity⃖ of ⊎ up to isomorphism 


#+begin_src agda2
⊥-identity⃖ : ∀ {A : Set} → ⊥ ⊎ A ≃ A
⊥-identity⃖ ._≃_.to (inj₂ x) = x
⊥-identity⃖ ._≃_.from = inj₂
⊥-identity⃖ ._≃_.from∘to (inj₂ x) = refl
⊥-identity⃖ ._≃_.to∘from y = refl
#+end_src

** ⊥-identity⃑ of ⊎ up to isomorphism
Bottom is the right identity of sums up to isomorphism.

#+begin_src agda2
⊥-identity⃑ : ∀ {A : Set} → A ⊎ ⊥ ≃ A
⊥-identity⃑ ._≃_.to (inj₁ x) = x
⊥-identity⃑ ._≃_.from = inj₁
⊥-identity⃑ ._≃_.from∘to (inj₁ x) = refl
⊥-identity⃑ ._≃_.to∘from y = refl
#+end_src

* Implication is function
Function application or //modus ponens// turns evidence of A into B
#+begin_src agda2
→-elim : ∀ {A B : Set}
  → (A → B)
  → A
    ------
  → B
→-elim f a = f a
#+end_src

Lambda abstraction is introduction and application is elimination.
#+begin_src agda2
η-→ : ∀ {A B : Set} (f : A → B) → (λ (x : A) → f x) ≡ f
η-→ f = refl
#+end_src

The function space =A → B= is often called the /exponential/.

/Currying/ (after Haskell Curry) transforms a function that takes a pair of
arguments into a function that takes the first of the pair and returns a
function that takes the second of the pair; /uncurrying/ transforms the
latter into the former and is the inverse of curry:

#+begin_src agda2
curry : {A B C : Set} → (A × B → C) → (A → B → C)
curry f a b = f ⟨ a , b ⟩

uncurry :  {A B C : Set} → (A → B → C) → (A × B → C)
uncurry f ⟨ a , b ⟩ = f a b
#+end_src

Currying of functions is isomporhic to exponentiation rule in arithmetic:
=(p ^ n) ^ m  ≡  p ^ (n * m)=

#+begin_src agda2
currying : ∀ {A B C : Set} → (A → B → C) ≃ (A × B → C)
currying ._≃_.to = uncurry
currying ._≃_.from = curry
currying ._≃_.from∘to = λ x → refl
currying ._≃_.to∘from = λ y → refl
#+end_src

#+begin_comment 
The main text of PLTA indicated the need of extensionality axiom in the
last clause of the above isomorohism proof, having defined the two
functions as above this seemed simpler. Find out why! I think the answer
is the tendency to /right/ programming vs /left/ programming - nice that I
discovered this on my own (well Agda steered me down this road) see:
[[https://github.com/plfa/plfa.github.io/issues/428][GitHub issue 428]]
#+end_comment 

In arithmetic also have the rule for exponentials:
=p ^ (n + m) = (p ^ n) * (p ^ m)=

Which correponds to an isomorphism:
#+begin_src agda2
→-⊎-over-× : ∀ {A B C : Set} → (A ⊎ B → C) -> ((A → C) × (B → C))
→-⊎-over-× f = ⟨ f ∘ inj₁ , f ∘ inj₂ ⟩ 

→-×-under-⊎ : ∀ {A B C : Set} → ((A → C) × (B → C)) → (A ⊎ B → C)
→-×-under-⊎ ⟨ f , g ⟩ = λ { (inj₁ x) → f x ; (inj₂ y) → g y }

-- help with line 4!
→-distrib-⊎ : ∀ {A B C : Set} → (A ⊎ B → C) ≃ ((A → C) × (B → C))
→-distrib-⊎ ._≃_.to = →-⊎-over-×
→-distrib-⊎ ._≃_.from = →-×-under-⊎
→-distrib-⊎ ._≃_.from∘to f = extensionality λ{ (inj₁ x) → refl ; (inj₂ y) → refl }
→-distrib-⊎ ._≃_.to∘from ⟨ f , g ⟩ = refl
#+end_src

Corresponding to the artihmetic rule:
=(p * n) ^ m = (p ^ m) * (n ^ m)=

We have the isomorphism:
#+begin_src agda2
→-distrib-× : ∀ {A B C : Set} → (A → B × C) ≃ (A → B) × (A → C)
→-distrib-× ._≃_.to f = ⟨ proj₁ ∘ f , proj₂ ∘ f ⟩
→-distrib-× ._≃_.from ⟨ g , h ⟩ = λ x → ⟨ g x , h x ⟩
→-distrib-× ._≃_.from∘to f = refl
→-distrib-× ._≃_.to∘from ⟨ g , h ⟩ = refl
#+end_src
#+begin_comment
Another divergence here is that in the main text the proof of the =from∘to=
left inverse required *both* =extensionality= and the =η-×= identity for
products. In the version above Agda found that this was just =refl=. See
comment above.
#+end_comment

* TODO Distributivity

Products distribute over sums, up to isomorphism.
#+begin_src agda2
×-to-⊎ : ∀ {A B C : Set} → (A ⊎ B) × C → (A × C) ⊎ (B × C)
×-to-⊎ ⟨ inj₁ a , c ⟩ = inj₁ ⟨ a , c ⟩
×-to-⊎ ⟨ inj₂ b , c ⟩ = inj₂ ⟨ b , c ⟩

×-from-⊎ : ∀ {A B C : Set} → ((A × C) ⊎ (B × C)) → (A ⊎ B) × C
×-from-⊎ (inj₁ ac) = ⟨ inj₁ (ac .proj₁) , ac .proj₂ ⟩
×-from-⊎ (inj₂ bc) = ⟨ inj₂ (bc .proj₁) , bc .proj₂ ⟩

×-distrib-⊎ : ∀ {A B C : Set} → (A ⊎ B) × C ≃ (A × C) ⊎ (B × C)
×-distrib-⊎ ._≃_.to = ×-to-⊎
×-distrib-⊎ ._≃_.from = ×-from-⊎
×-distrib-⊎ ._≃_.from∘to ⟨ inj₁ a , c ⟩ = refl
×-distrib-⊎ ._≃_.from∘to ⟨ inj₂ b , c ⟩ = refl
×-distrib-⊎ ._≃_.to∘from (inj₁ ⟨ a , c ⟩) = refl
×-distrib-⊎ ._≃_.to∘from (inj₂ ⟨ b , c ⟩) = refl
#+end_src

Sums do not distribute over products up to isomorphism but it is an embedding.
#+begin_src agda2
⊎-distrib-× : ∀ {A B C : Set} → (A × B) ⊎ C ≲ (A ⊎ C) × (B ⊎ C)
⊎-distrib-× = {!!}
#+end_src

* TODO Exercises
#+begin_src agda2
⊎-weak-× : ∀ {A B C : Set} → (A ⊎ B) × C → A ⊎ (B × C)
⊎-weak-× = {!!}
#+end_src

#+begin_src agda2
⊎×-implies-×⊎ : ∀ {A B C D : Set} → (A × B) ⊎ (C × D) → (A ⊎ C) × (B ⊎ D)
⊎×-implies-×⊎ = {!!}
#+end_src

Does the converse hold? If not why not, else give a proof.
#+begin_src agda2
#+end_src


[fn:2] In the standard library this is more sophisticated as it marks the
input type as irrelevant so that all proofs of false are equal. 

[fn:1] Agda (a hen) is named after the Swedish song "Hönan Agda" and this
also alludes to the theorem prover "Coq" named after Theirry
Coquand. "Coq" is being rebranded as "Rocq" so maybe we can now all clean
up our acts. Still Agda has a nicer logo. Another animal in this stable is
"Idris" the dragon! No smutty connotations there.
