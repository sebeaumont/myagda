#+TITLE: Propositional Inequality in Agda
#+AUTHOR: Simon Beaumont
#+EMAIL: datalligator@icloud.com
#+BIBLIOGRAPHY: ~/Notes/bibliography.bib
#+STARTUP: inlineimages overview latexpreview
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usetikzlibrary{positioning}

* Propositional Inequality
#+begin_src agda2
import Data.Nat as Nats
open Nats using (ℕ; zero; suc; _+_; _*_)

import Data.Nat.Properties as NatProps
open NatProps using (+-comm; *-distrib-+; *-comm)

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_≡_; refl; cong)
#+end_src

** The Inequality Type
#+begin_src agda2
module Inequality where

data _≤_ : ℕ → ℕ → Set where
  z≤n : ∀ {n : ℕ}
      --------
    → zero ≤ n

  s≤s : ∀ {m n : ℕ}
    → m ≤ n
      -------------
    → suc m ≤ suc n

infix 4 _≤_
#+end_src

#+begin_src agda2
≤-refl : ∀ {n : ℕ}
    -----
  → n ≤ n
≤-refl {zero} = z≤n
≤-refl {suc n} = s≤s ≤-refl
#+end_src

** Transitivity of Inequality
#+begin_src agda2
≤-trans : ∀ {l m n : ℕ}
  → l ≤ m
  → m ≤ n
    -----
  → l ≤ n
≤-trans z≤n m≤n = z≤n
≤-trans (s≤s l≤m) (s≤s m≤n) = s≤s (≤-trans l≤m m≤n)
#+end_src

** Inequality reasoning

My anaology with ≡ an attempt to do the same tricks and prove things
in Relations a more clear way.

#+begin_src agda2
module ≤-Reasoning where
  
  infix  3 _∎
  infixr 2 _≤⟨⟩_ step-≤ _≡⟨_⟩_
  infix  1 begin_

  begin_ : ∀ {x y : ℕ}
    → x ≤ y
      -----
    → x ≤ y
  begin_ x≤y = x≤y

  _≤⟨⟩_ : ∀ (x {y} : ℕ)
    → x ≤ y
      -----
    → x ≤ y
  _ ≤⟨⟩ x≤y = x≤y

  step-≤ : ∀ (x {y z} : ℕ)
    → y ≤ z
    → x ≤ y
      -----
    → x ≤ z
  step-≤ _ y≤z x≤y = ≤-trans x≤y y≤z

  _≡⟨_⟩_ : ∀ (l : ℕ) {m n : ℕ}
    → l ≡ m
    → m ≤ n
      -----
    → l ≤ n
  _ ≡⟨ refl ⟩ m≤n = m≤n 

  _∎ : ∀ (x : ℕ)
      -----
    → x ≤ x
  _∎ _ = ≤-refl

  -- syntactic candy for step-≤
  syntax step-≤  x y≤z x≤y = x ≤⟨ x≤y ⟩ y≤z
#+end_src

** Our task now is to prove mononicity

#+begin_src agda2
open ≤-Reasoning
#+end_src

#+begin_src agda2
+-mono⃗-≤ : ∀ (l m n : ℕ)
  → m ≤ n
    -------------
  → (l + m) ≤ (l + n)
+-mono⃗-≤ zero m n m≤n =
  begin
    zero + m
  ≤⟨ m≤n ⟩
    zero + n
  ∎
+-mono⃗-≤ (suc l) m n m≤n =
  begin
    (suc l) + m
  ≤⟨ s≤s (+-mono⃗-≤ l m n m≤n) ⟩  
    suc (l + n)
  ∎
#+end_src

*** If this is more illustrative then good.
#+begin_src agda2
+-mono⃖-≤ : ∀ (l m n : ℕ)
  → l ≤ m
    -------------
  → l + n ≤ m + n
+-mono⃖-≤ l m n l≤m =
  begin
    l + n
  ≡⟨ +-comm l n ⟩
    n + l
  ≤⟨ {!+-mono⃗-≤ l n m l≤m!} ⟩
    n + m
  ≡⟨ +-comm n m ⟩  
    m + n
  ∎
#+end_src

#+begin_src agda2
+-mono-≤ : ∀ (k l m n : ℕ)
  → k ≤ l
  → m ≤ n
    -------------
  → k + m ≤ l + n
+-mono-≤ k l m n k≤l m≤n =
  begin
    k + m
  ≤⟨ +-mono⃖-≤ k l m k≤l ⟩
    l + m
  ≤⟨ +-mono⃗-≤ l m n m≤n ⟩
    l + n 
  ∎

-- ≤-trans (+-mono⃖-≤ k l m k≤l) (+-mono⃗-≤ l m n m≤n)  
#+end_src
