#+TITLE: Relations in Agda
#+SETUPFILE: org-source-setup.org

* Preamble

#+begin_src agda2
module Relations where

import Equality as Eq
open Eq using (_≡_; refl; cong; cong-app)
open Eq.≡-Reasoning

import Naturals as Nat
open Nat using (ℕ; zero; suc; _+_; +-comm; _*_; *-comm)

#+end_src

* Ordering Relations

** Properties of ordering relations

- /Reflexive/ For all n, the relation n ≤ n holds.
- /Transitive/ For all m, n, and p, if m ≤ n and n ≤ p hold, then m ≤ p holds.
- /Anti-symmetric/ For all m and n, if both m ≤ n and n ≤ m hold, then m ≡ n holds.
- /Total/ For all m and n, either m ≤ n or n ≤ m holds.

- /Preorder/ is any relation that is reflexive and transitive.
- /Partial order/ is any preorder that is also antisymmetric.
- /Total order/ is any partial order that is also total.

** Basic ordering relation on ℕ

The new thing we are doing here is that in the definition of the type
the constructors yield the proposition for the relation by creating an
(ℕ indexed) type.

Also I really like this cool way of embedding the inference rules in
Agda using comments.

#+begin_src agda2
data _≤_ : ℕ → ℕ → Set where

  z≤n : ∀ {n : ℕ}
      --------
    → zero ≤ n                  -- for ∀ ℕ : z ≤ n holds

  s≤s : ∀ {m n : ℕ}
    → m ≤ n                     -- if evidence of m ≤ n is given
      -------------
    → suc m ≤ suc n             -- then suc m ≤ suc n holds

infix 4 _≤_
#+end_src

** Inverse rules

#+begin_src agda2
inv-s≤s : ∀ {m n : ℕ}
  → suc m ≤ suc n
    -------------
  → m ≤ n
inv-s≤s (s≤s m≤n) = m≤n
#+end_src

A proof that the only way a Nat can be less than or equal to ~zero~
is if it is exactly ~zero~. This is a result of /antisymmetry/ of the order
relation and the base case.

#+begin_src agda2
inv-z≤n : ∀ {m : ℕ}
  → m ≤ zero
    --------
  → m ≡ zero
inv-z≤n z≤n = refl
#+end_src

** Reflexivity

#+begin_src agda2
≤-refl : ∀ {n : ℕ}
    -----
  → n ≤ n
≤-refl {zero} = z≤n
≤-refl {suc n} = s≤s ≤-refl
#+end_src

** Transitivity

#+begin_src agda2
≤-trans : ∀ {m n p : ℕ}
  → m ≤ n
  → n ≤ p
   ------
  → m ≤ p
≤-trans z≤n _ = z≤n
≤-trans (s≤s m≤n) (s≤s n≤p) = s≤s (≤-trans m≤n n≤p)
#+end_src

With explicit parameters:
#+begin_src agda2
≤-trans' : ∀ (m n p : ℕ)
  → m ≤ n
  → n ≤ p
   ------
  → m ≤ p
≤-trans' zero _ _  z≤n _ = z≤n
≤-trans' (suc m) (suc n) (suc p) (s≤s m≤n) (s≤s n≤p) = s≤s (≤-trans m≤n n≤p)
#+end_src

The technique of induction on evidence that a property holds (e.g.,
inducting on evidence that m ≤ n), rather than induction on values (for)
which the property holds (e.g., inducting on m), will turn out to be
immensely valuable, and one that we use often.[cite:@plfa22.08]

** Anti-symmetry

#+begin_src agda2
≤-antisym : ∀ {m n : ℕ}
  → m ≤ n
  → n ≤ m
    -----
  → m ≡ n
≤-antisym z≤n z≤n = refl
≤-antisym (s≤s m≤n) (s≤s n≤m) = cong suc (≤-antisym m≤n n≤m)
-- ≤-antisym (s≤s m≤n) (s≤s n≤m) rewrite (≤-antisym m≤n n≤m) = refl
#+end_src

The relation is defined inductively on both sides of the inequality so the case
analysis does not require further cases to satisfy.

** Totality

Either m ≤ n or n ≤ m (or both if they are equal). Evidence of
totality is either the evidence forward if m ≤ n or backward if n ≤ m.

#+begin_src agda2
data Total (m n : ℕ) : Set where
  forward :
      m ≤ n
      ------
    → Total m n

  backward :
      n ≤ m
      ---------
    → Total m n
#+end_src

To prove totality the evidence for forward and backward base cases are
provided; and for the inductive case we case split on the result of
the (smaller) recursive call, which terminates with the appropriate
base case.  The ordering of the clauses for the base cases determines
which evidence is produced if n and m are equal (in this case the
forward clause matches first).

#+begin_src agda2
≤-total : ∀ (m n : ℕ) → Total m n
≤-total zero n = forward z≤n
≤-total (suc m) zero = backward z≤n
≤-total (suc m) (suc n)
  with ≤-total m n
... | forward m≤n = forward (s≤s m≤n)
... | backward n≤m = backward (s≤s n≤m)
#+end_src

** Monotonicty

An operator with respect to an ordering may exhibit monotonicty.  In
this case addition is monotone with regard to inequality.  Let's state
the theorem and then show that addition is monotonic on the right.

#+begin_src agda2
+-monoʳ-≤ : ∀ (l m n : ℕ)
  → m ≤ n
    -------------
  → l + m ≤ l + n
+-monoʳ-≤ zero m n m≤n = m≤n
+-monoʳ-≤ (suc l) m n m≤n = s≤s (+-monoʳ-≤ l m n m≤n)  
#+end_src

Now we can state that addition is monotonic on the left as this
follows from the commutativity of addition and the previous case.

#+begin_src agda2
+-monoˡ-≤ : ∀ (l m n : ℕ)
  → l ≤ m
    -------------
  → l + n ≤ m + n
+-monoˡ-≤ l m n l≤m rewrite +-comm l n | +-comm m n = +-monoʳ-≤ n l m l≤m
#+end_src

Now to combine the two previous results with transitivity.

#+begin_src agda2
+-mono-≤ : ∀ (k l m n : ℕ)
  → k ≤ l
  → m ≤ n
    -------------
  → k + m ≤ l + n
+-mono-≤ k l m n k≤l m≤n = ≤-trans (+-monoˡ-≤ k l m k≤l) (+-monoʳ-≤ l m n m≤n)  
#+end_src

Show that multiplication is monotonic w.r.t inequality.

#+begin_src agda2
*-monoʳ-≤ : ∀ (l m n : ℕ)
  → m ≤ n
    -------------
  → l * m ≤ l * n
*-monoʳ-≤ zero _ _ _ = z≤n
*-monoʳ-≤ (suc l) m n m≤n = +-mono-≤ m n (l * m) (l * n) m≤n (*-monoʳ-≤ l m n m≤n)
#+end_src

That was more tricky; we need to have seen (from the goal) that the
monotonicty of addition proof was required and then applying the
inductive case to provide the final piece of evidence.

Now for the left identity...
#+begin_src agda2
*-monoˡ-≤ : ∀ (l m n : ℕ)
  → l ≤ m
    -------------
  → l * n ≤ m * n
*-monoˡ-≤ l m n l≤m rewrite *-comm l n | *-comm m n = *-monoʳ-≤ n l m l≤m
#+end_src

#+begin_src agda2
*-mono-≤ : ∀ (k l m n : ℕ)
  → k ≤ l
  → m ≤ n
    -------------
  → k * m ≤ l * n 
*-mono-≤ k l m n k≤l m≤n = ≤-trans (*-monoˡ-≤ k l m k≤l) (*-monoʳ-≤ l m n m≤n)          
#+end_src

