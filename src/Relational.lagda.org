#+TITLE: Relational Reasoning
#+SETUPFILE: org-source-setup.org

* Relational Reasoning 
#+begin_src agda2
module Relational where
import Naturals as Nats
open Nats using (ℕ; zero; suc; _+_; _*_)

import Naturals as NatProps
open NatProps using (+-comm; *-distrib-+; *-comm)

import Equality as Eq
open Eq using (_≡_; refl; cong)

import Relations as Rel
open Rel using (≤-refl; ≤-trans)
#+end_src

* ≤-Reasoning

By anaology with ≡-Reasoning, attempt to do the same tricks and prove things
in Relations a more clear way.

#+begin_src agda2
module ≤-Reasoning where

  infix  3 _∎
  infixr 2 _≤⟨⟩_ step-≤ _≡⟨_⟩_
  infix  1 begin-≤_

  begin-≤_ : ∀ {x y : ℕ}
    → x ≤ y
      -----
    → x ≤ y
  begin-≤_ x≤y = x≤y

  _≤⟨⟩_ : ∀ (x {y} : ℕ)
    → x ≤ y
      -----
    → x ≤ y
  _ ≤⟨⟩ x≤y = x≤y

  step-≤ : ∀ (x {y z} : ℕ)
    → y ≤ z
    → x ≤ y
      -----
    → x ≤ z
  step-≤ _ y≤z x≤y = ≤-trans x≤y y≤z

  _≡⟨_⟩_ : ∀ (l : ℕ) {m n : ℕ}
    → l ≡ m
    → m ≤ n
      -----
    → l ≤ n
  _ ≡⟨ refl ⟩ m≤n = m≤n 

  _∎ : ∀ (x : ℕ)
      -----
    → x ≤ x
  _∎ _ = ≤-refl

  -- syntactic candy for step-≤
  syntax step-≤  x y≤z x≤y = x ≤⟨ x≤y ⟩ y≤z
#+end_src


** Our task now is to prove mononicity again

#+begin_src agda2
open ≤-Reasoning
#+end_src

#+begin_src agda2
+-monoʳ-≤ : ∀ (l m n : ℕ)
  → m ≤ n
    -------------
  → l + m ≤ l + n
+-monoʳ-≤ zero m n m≤n =
  begin
    zero + m
  ≤⟨ m≤n ⟩
    zero + n
  ∎
+-monoʳ-≤ (suc l) m n m≤n =
  begin
    (suc l) + m
  ≤⟨ s≤s (+-monoʳ-≤ l m n m≤n) ⟩  
    suc (l + n)
  ∎
#+end_src

#+begin_src agda2
+-monoˡ-≤ : ∀ (l m n : ℕ)
  → l ≤ m
    -------------
  → l + n ≤ m + n
+-monoˡ-≤ l m n l≤m rewrite +-comm l n | +-comm m n = +-monoʳ-≤ n l m l≤m
#+end_src


#+begin_src agda2
+-mono-≤ : ∀ (k l m n : ℕ)
  → k ≤ l
  → m ≤ n
    -------------
  → k + m ≤ l + n
+-mono-≤ k l m n k≤l m≤n =
  begin
    k + m
  ≤⟨ +-monoˡ-≤ k l m k≤l ⟩
    l + m
  ≤⟨ +-monoʳ-≤ l m n m≤n ⟩
    l + n 
  ∎
#+end_src
