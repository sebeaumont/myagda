#+TITLE: Natural numbers in Agda
#+SETUPFILE: org-source-setup.org

* Natural Numbers

** Imports

We eat our own dogfood and import locally made definitions rather than the
standard library.

#+begin_src agda2
module Naturals where

import Equality as Eq 
open Eq using (_≡_; refl; cong; sym)
open Eq.≡-Reasoning using (begin_; _≡⟨⟩_; step-≡; _∎)
#+end_src

** Define Peano's numbers

#+begin_src agda2
module Naturals where

data ℕ : Set where
  zero : ℕ
  suc  : ℕ → ℕ

{-# BUILTIN NATURAL ℕ #-}
#+end_src

** The additive monoid (ℕ,+,0)

Definition 1. Inductive definition of addition 

#+begin_src agda2
_+_ : ℕ → ℕ → ℕ
zero    + y = y
(suc x) + y = suc (x + y)

infixl 6 _+_
#+end_src

** Theorem 1. Associativity of addition

#+begin_src agda2
+-assoc : ∀ (n m k : ℕ) → (n + m) + k ≡ n + (m + k) -- the induction hypothesis
+-assoc zero m k =
  begin
    (zero + m) + k
  ≡⟨⟩
    m + k
  ≡⟨⟩
    zero + (m + k)
  ∎
+-assoc (suc n) m k =
  begin
    (suc n + m) + k             -- using inductive defintion of addition
  ≡⟨⟩
    suc (n + m) + k
  ≡⟨⟩
    suc ((n + m) + k)           -- work down simplifying
  ≡⟨ cong suc (+-assoc n m k) ⟩ -- this step needs some explanation: 1.
    suc (n + (m + k))           -- work up from goal simplifying
  ≡⟨⟩
    suc n + (m + k)             -- goal!
  ∎
#+end_src

1. A relation is said to be a /congruence/ relative to a given
function (in this case the constructor =suc),= if it is preserved by
application of the function. The recursive application of the function
=(+-assoc n m k)= has the type of the induction hypotheis and =cong suc=
prefaces =suc= to each side of the equation; establishing evidence for the
hypotheis: [[https://plfa.github.io/Induction/][Programming Language Foundations in Agda Chapter 2. on
Induction]]

** Lemma 1.1 additive identity of 0

#+begin_src agda2
+-identityʳ : ∀ (n : ℕ) → (n + zero) ≡ n
+-identityʳ zero = refl
+-identityʳ (suc n) = cong suc (+-identityʳ n)

+-identityˡ : ∀ (n : ℕ) → zero + n ≡ n
+-identityˡ zero = refl
+-identityˡ (suc n) = cong suc (+-identityˡ n)

-- Lemma 1.2 define suc on second argument of addition
+-suc : ∀ (m n : ℕ) → m + suc n ≡ suc (m + n)
+-suc zero n =
  begin
    zero + suc n
  ≡⟨⟩
    suc n
  ≡⟨⟩
    suc (zero + n)
  ∎
+-suc (suc m) n =
  begin
    suc m + suc n
  ≡⟨⟩
    suc (m + suc n)
  ≡⟨ cong suc (+-suc m n) ⟩
    suc (suc (m + n))
  ≡⟨⟩
    suc (suc m + n)
  ∎

-- Theorem 2 commutativity of addition
+-comm : ∀ (m n : ℕ) → m + n ≡ n + m
+-comm m zero =
  begin
    m + zero
  ≡⟨ +-identityʳ m ⟩
    m
  ≡⟨⟩
    (zero + m)
  ∎
+-comm m (suc n) =
  begin
    m + suc n
  ≡⟨ +-suc m n ⟩
    suc (m + n)
  ≡⟨ cong suc (+-comm m n) ⟩
    suc n + m
  ∎

-- Corollary 1. rearragement of parenthesis (+ is left associative)
-- no induction just apply +-assoc twice to shift parens R and L
+-rearrange : ∀ (m n p q : ℕ) → (m + n) + (p + q) ≡ m + (n + p) + q 
+-rearrange m n p q =
  begin
    (m + n) + (p + q)
  ≡⟨ sym (+-assoc (m + n) p q) ⟩       -- shift parens from R to L
    ((m + n) + p) + q
  ≡⟨ cong (_+ q) (+-assoc m n p) ⟩     -- shift parens from L to R
    (m + (n + p)) + q
  ∎
#+end_src

** The mutiplicative monoid (ℕ,*,1)

*** Defintion 2. inductive definition of multiplication

#+begin_src agda2
_*_ : ℕ → ℕ → ℕ
zero    * _  = zero
(suc n) * m  = m + (n * m) 
#+end_src

*** Lemma 2.1 right multiplicative identity

#+begin_src agda2
*-identityʳ : ∀ (n : ℕ) → n * 1 ≡ n
*-identityʳ zero = refl
*-identityʳ (suc n) =
  begin
    (suc n) * 1
  ≡⟨⟩
    suc (n * 1)
  ≡⟨ cong suc (*-identityʳ n) ⟩
    suc n
  ∎
#+end_src

*** Lemma 2.2 left multiplicative identity

#+begin_src agda2
*-identityˡ : ∀ (n : ℕ) → 1 * n ≡ n
*-identityˡ zero = refl
*-identityˡ (suc n) =
  begin
   1 * (suc n) 
  ≡⟨⟩
    suc (n + zero)              -- computer found this for me!
  ≡⟨ cong suc (*-identityˡ n) ⟩
    suc n
  ∎
#+end_src

*** Lemma 2.3 n times zero 

#+begin_src agda2
*-zero : (n : ℕ) → n * 0 ≡ 0
*-zero zero = refl
*-zero (suc n) = *-zero n
#+end_src

*** Lema 2.4 *-suc n

#+begin_src agda2
*-suc : ∀ m n → m * suc n ≡ m + m * n
*-suc zero    n = refl
*-suc (suc m) n =
  begin
    suc m * suc n
  ≡⟨⟩
    suc n + m * suc n
  ≡⟨ cong (suc n +_) (*-suc m n) ⟩
    suc n + (m + m * n)
  ≡⟨⟩
    suc (n + (m + m * n))
  ≡⟨ cong suc (sym (+-assoc n m (m * n))) ⟩
    suc (n + m + m * n)
  ≡⟨ cong (λ x → suc (x + m * n)) (+-comm n m) ⟩
    suc (m + n + m * n)
  ≡⟨ cong suc (+-assoc m n (m * n)) ⟩
    suc (m + (n + m * n))
  ≡⟨⟩
    suc m + suc m * n
  ∎
#+end_src

*** Theorem 2. multiplication distributes over addition

#+begin_src agda2
*-distrib-+ : ∀ (m n p : ℕ) -> (m + n) * p ≡ m * p + n * p
*-distrib-+ zero n p =
  begin
    (zero + n) * p
  ≡⟨⟩
     n * p
  ≡⟨⟩
    zero * p + n * p
  ∎
*-distrib-+ (suc m) n p =
  begin
    ((suc m) + n) * p
  ≡⟨ cong (_* p) (+-comm (suc m) n) ⟩  -- commutativity of +
    (n + (suc m)) * p
  ≡⟨ cong (_* p) (+-suc n m) ⟩         -- suc defined on 2nd arg
    (suc (n + m)) * p
  ≡⟨⟩                                  -- inductive defintion of *
    p + ((n + m) * p)           
  ≡⟨ cong (p +_) (*-distrib-+ n m p) ⟩ -- inductive case of *-distrib-+
    p + (n * p + m * p)         
  ≡⟨ cong (p +_) (+-comm (n * p) (m * p)) ⟩ -- commutativity of +
    p + (m * p + n * p)         
  ≡⟨ sym (+-assoc p (m * p) (n * p)) ⟩ -- move parens L 
    (p + (m * p)) + n * p       
  ≡⟨⟩                                  -- ^ inductive defintion of *
    (suc m) * p + n * p         
  ∎
#+end_src

*** Theorem 3. Associativity of multiplication

#+begin_src agda2
*-assoc : ∀ (n m l : ℕ) -> (n * m) * l ≡ n * (m * l)
*-assoc zero _ _ = refl
*-assoc (suc n) m l =
  begin
    ((suc n) * m) * l                  
  ≡⟨⟩                                  -- inductive defintion of *
    (m + n * m) * l                    
  ≡⟨ *-distrib-+ m (n * m) l ⟩         -- * distributes over +
    (m * l) + (n * m) * l
  ≡⟨ cong ((m * l) +_) (*-assoc n m l) ⟩ -- inductive case of *-assoc
    (m * l) + n * (m * l)
  ≡⟨⟩                                 -- ^ inductive defintion of *
    suc n * (m * l)
  ∎
#+end_src

*** TODO Commutativity of multiplication

#+begin_src agda2
*-comm : ∀ (m n : ℕ) → m * n ≡ n * m
*-comm zero n = sym (*-zero n)
*-comm (suc m) n =
  begin
    suc m * n
  ≡⟨⟩
    n + m * n
  ≡⟨ cong (_+_ n) (*-comm m n) ⟩
    n + n * m
  ≡⟨ sym (*-suc n m) ⟩
    n * suc m
  ∎
#+end_src


** Using ~rewrite~ for shorthand equational reasoning

[[id:80C26F92-669C-48C5-8247-F9EF51EC331B][Agda Notes]]

#+begin_src agda2
*-assoc' : ∀ (n m l : ℕ) -> (n * m) * l ≡ n * (m * l)
*-assoc' zero _ _ = refl
*-assoc' (suc n) m l rewrite *-distrib-+ m (n * m) l | *-assoc n m l = refl

+-assoc' : ∀ (n m l : ℕ) -> (n + m) + l ≡ n + (m + l)
+-assoc' zero _ _ = refl
+-assoc' (suc n) m l rewrite +-assoc n m l = refl
#+end_src

** A Finitist proof of associativty of addition
I don't think we were actually asked for this; but only to describe the
induction steps from a finitist perspective.

#+begin_src agda2
finite-+-assoc : ∀ (n m k : ℕ) → (n + m) + k ≡ n + (m + k)
-- on day 1 we know 0 and (0 + 0) + 0 ≡ 0 + (0 + 0)
finite-+-assoc 0 0 0 = refl
-- on day 2 we know 1 and ...
finite-+-assoc 0 0 1 = refl
finite-+-assoc 0 1 0 = refl
finite-+-assoc 0 1 1 = refl
finite-+-assoc 1 0 0 = refl
finite-+-assoc 1 0 1 = refl
finite-+-assoc 1 1 0 = refl
finite-+-assoc 1 1 1 = refl
-- and then I gave up writing stuff out... but Agda gave me a clue...
finite-+-assoc zero zero (suc k) = refl
finite-+-assoc zero (suc m) k = refl
finite-+-assoc (suc n) m k rewrite finite-+-assoc n m k = refl
#+end_src

** Even and Odd Naturals

*** Definitions

Nota: forward declaration of mutually recursive types.

#+begin_src agda2
data even : ℕ → Set
data odd : ℕ → Set

data even where

  zero :
    ---------
    even zero
    
  suc : ∀ {n : ℕ}
    → odd n
      ------
    → even (suc n)
    
data odd where

  suc : ∀ {n : ℕ}
    → even n
      -----------
    → odd (suc n)
#+end_src

*** Additional even is commutative: to explore rewrite/with/aux function

See the following SO question: [[https://proofassistants.stackexchange.com/questions/3826/how-to-convert-agdas-with-statement-to-a-helper-function][with desugared to helper]]

Use =rewrite= sugar and commutatvity of +

#+begin_src agda2
even-comm : ∀ (m n : ℕ)
  → even (m + n)
     ------------
  → even (n + m)
even-comm m n p rewrite +-comm m n = p  
#+end_src

Using =with= and =simultaneous abstraction=: [[https://agda.readthedocs.io/en/latest/language/with-abstraction.html#simultaneous-abstraction][Agda reference manual]]

#+begin_src agda2
even-comm' : ∀ (m n : ℕ)
  → even (m + n)
     ------------
  → even (n + m)
even-comm' m n p with m + n   | +-comm m n
...                | .(n + m) | refl = p
#+end_src

This using a helper function to do the job of the above
which I find much clearer tbh.

#+begin_src agda2
even-comm'' : ∀ (m n : ℕ)
  → even (m + n)
     ------------
  → even (n + m)
even-comm'' m n p = helper-fn (m + n) (+-comm m n) p
  where
  helper-fn : (x : ℕ) → (x ≡ n + m) → even x → even (n + m)
  helper-fn _ refl p = p
#+end_src

*** Prop 1: The sum of two even numbers is even

#+begin_src agda2
e+e≡e : ∀ {m n : ℕ}
  → even m
  → even n
    ------------
  → even (m + n)
#+end_src

*** Prop 2: The sum of an even and odd number is odd

#+begin_src agda2
o+e≡o : ∀ {m n : ℕ}
  → odd m
  → even n
    -----------
  → odd (m + n)
#+end_src

*** Proofs of Prop 1 and 2 (mutually recursive)

#+begin_src agda2
e+e≡e zero     en = en
e+e≡e (suc om) en = suc (o+e≡o om en)

o+e≡o (suc em) en = suc (e+e≡e em en)
#+end_src

*** Prop 3: The sum of two odd numbers is even

#+begin_src agda2
o+o≡e : ∀ {m n : ℕ}
  → odd m
  → odd n
  --------------
  → even (m + n)

o+o≡e (suc zero) on = suc on
o+o≡e (suc (suc om)) on = suc (suc (o+o≡e om on))
#+end_src

** Equality for ℕ

TODO

I first did this proof by contradiction (I prefer to think of it as
falsehood) in Idris following the nice way it helps factor out all the
required lemma and case splits. We shall do the same in Agda ab-initio
or first principles following PLFA Chapter on Negation.

#+begin_src agda2

#+end_src
